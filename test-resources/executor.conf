# config

[default]
root_dir = ${env:app_root}
test_resources = ${root_dir}/test-resources
temporary_dir = ${root_dir}/target/mng
temporary_batch_dir = ${temporary_dir}/batch
results_dir = ${temporary_dir}/results

[torch_config]
class_name = zensols.deeplearn.TorchConfig
use_gpu = False
data_type = eval({'import': ['torch']}): torch.float32

[gpu_torch_config]
class_name = zensols.deeplearn.TorchConfig
use_gpu = True
data_type = eval({'import': ['torch']}): torch.float32


# vectorizer

[label_vectorizer]
class_name = zensols.deeplearn.CategoryEncodableFeatureVectorizer
categories = eval: ['setosa', 'versicolor', 'virginica']
feature_type = ilabel

[series_vectorizer]
class_name = zensols.deeplearn.SeriesEncodableFeatureVectorizer
feature_type = iseries

[iris_vectorizer_manager]
class_name = zensols.deeplearn.FeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: 'label_vectorizer series_vectorizer'.split()
module_vectorizers = None

[vectorizer_set]
class_name = zensols.deeplearn.FeatureVectorizerManagerSet
names = eval: 'iris_vectorizer_manager'.split()


# persistence

[dataset_stash]
class_name = zensols.deeplearn.DefaultDataframeStash
dataframe_path = path: ${default:temporary_dir}/df.dat
key_path = path: ${default:temporary_dir}/keys.dat
split_col = ds_type
input_csv_path = path: ${default:test_resources}/iris.csv

[dataset_split_stash]
class_name = zensols.deeplearn.DatasetSplitStash
delegate = instance: dataset_stash
split_container = instance: dataset_stash

[batch_dataset_dir_stash]
class_name = zensols.persist.DirectoryStash
path = path: ${default:temporary_batch_dir}/data

[batch_dataset_stash]
class_name = zensols.deeplearn.BatchStash
delegate = instance: batch_dataset_dir_stash
split_stash_container = instance: dataset_stash
data_point_id_sets_path = path: ${default:temporary_batch_dir}/batch-point-keys.dat
vectorizer_manager_set = instance: vectorizer_set
data_point_type = eval({'import': ['iris_domain']}): iris_domain.IrisDataPoint
batch_type = eval({'import': ['iris_domain']}): iris_domain.IrisBatch
decoded_attributes = None
model_torch_config = instance: gpu_torch_config
batch_size = 20
chunk_size = 0
workers = 0
batch_limit = eval: sys.maxsize

[batch_split_dataset_stash]
class_name = zensols.deeplearn.DatasetSplitStash
delegate = instance: batch_dataset_stash
split_container = instance: batch_dataset_stash


# model
[net_settings]
class_name = iris_model.IrisNetworkSettings
torch_config = instance: gpu_torch_config
dropout = 0.5
activation = relu
in_features = 4
out_features = 3
middle_features = eval: [5, 1, 1]
debug = False

[model_settings]
class_name = zensols.deeplearn.ModelSettings
path = path: ${default:temporary_dir}/model.pt
learning_rate = 0.1
# its a tiny data set so it will literally all fit in GPU memory
batch_iteration = gpu
# number of epochs to train the model
epochs = 50

[executor]
class_name = zensols.deeplearn.ModelExecutor
model_name = Iris
model_settings = instance: model_settings
net_settings = instance: net_settings
dataset_stash = instance: batch_split_dataset_stash
dataset_split_names = eval: 'train dev test'.split()
result_path = path: ${default:results_dir}
