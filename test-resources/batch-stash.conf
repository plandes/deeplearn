# config

[default]
temporary_dir = ./target/stash
temporary_batch_dir = ${temporary_dir}/batch

[torch_config]
class_name = zensols.deeplearn.TorchConfig
use_gpu = False
data_type = eval({'import': ['torch']}): torch.float64

[gpu_torch_config]
class_name = zensols.deeplearn.TorchConfig
use_gpu = True
data_type = eval({'import': ['torch']}): torch.float16


# vectorizer

[label_vectorizer]
class_name = zensols.deeplearn.vectorize.CategoryEncodableFeatureVectorizer
categories = eval: ['setosa', 'versicolor', 'virginica']
feature_type = ilabel

[series_vectorizer]
class_name = zensols.deeplearn.vectorize.SeriesEncodableFeatureVectorizer
feature_type = iseries

[iris_vectorizer_manager]
class_name = zensols.deeplearn.vectorize.FeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = eval: 'label_vectorizer series_vectorizer'.split()
module_vectorizers = None

[vectorizer_set]
class_name = zensols.deeplearn.vectorize.FeatureVectorizerManagerSet
names = eval: 'iris_vectorizer_manager'.split()


# persistence

[dataset_stash]
class_name = zensols.dataframe.DefaultDataframeStash
dataframe_path = path: target/df.dat
key_path = path: target/keys.dat
split_col = ds_type
input_csv_path = path: test-resources/iris/iris.csv

[dataset_split_stash]
class_name = zensols.dataset.DatasetSplitStash
delegate = instance: dataset_stash
split_container = instance: dataset_stash

[batch_dataset_dir_stash]
class_name = zensols.persist.DirectoryStash
path = path: ${default:temporary_batch_dir}/data

[feature_subset_batch_dataset_stash]
class_name = zensols.deeplearn.batch.BatchStash
delegate = instance: batch_dataset_dir_stash
split_stash_container = instance: dataset_stash
data_point_id_sets_path = path: ${default:temporary_batch_dir}/batch-point-keys.dat
vectorizer_manager_set = instance: vectorizer_set
data_point_type = eval({'import': ['iris.model']}): iris.model.IrisDataPoint
batch_type = eval({'import': ['iris.model']}): iris.model.IrisBatch
decoded_attributes = eval: ['label']
model_torch_config = instance: gpu_torch_config
batch_size = 7
chunk_size = 0
workers = 0
batch_limit = 10

[batch_dataset_stash]
class_name = zensols.deeplearn.batch.BatchStash
delegate = instance: batch_dataset_dir_stash
split_stash_container = instance: dataset_stash
data_point_id_sets_path = path: ${default:temporary_batch_dir}/batch-point-keys.dat
vectorizer_manager_set = instance: vectorizer_set
data_point_type = eval({'import': ['iris.model']}): iris.model.IrisDataPoint
batch_type = eval({'import': ['iris.model']}): iris.model.IrisBatch
decoded_attributes = None
model_torch_config = instance: gpu_torch_config
batch_size = 7
chunk_size = 0
workers = 0
batch_limit = 10

[batch_split_dataset_stash]
class_name = zensols.dataset.DatasetSplitStash
delegate = instance: batch_dataset_stash
split_container = instance: batch_dataset_stash
