# config

[default]
root_dir = ${env:app_root}
test_resources = ${root_dir}/test-resources/mnist
temporary_dir = ${root_dir}/target/mnist
temporary_batch_dir = ${temporary_dir}/batch
results_dir = ${temporary_dir}/results
dataset_dir = ${root_dir}/datasets/mnist

[torch_config]
class_name = zensols.deeplearn.TorchConfig
use_gpu = False
data_type = eval({'import': ['torch']}): torch.float32

[gpu_torch_config]
class_name = zensols.deeplearn.TorchConfig
use_gpu = False
data_type = eval({'import': ['torch']}): torch.float32


# vectorizer

[mnist_vectorizer_manager]
class_name = zensols.deeplearn.vectorize.FeatureVectorizerManager
torch_config = instance: torch_config
configured_vectorizers = None
module_vectorizers = eval: ['identity']

[vectorizer_set]
class_name = zensols.deeplearn.vectorize.FeatureVectorizerManagerSet
names = eval: 'mnist_vectorizer_manager'.split()


# stashes

[dataloader_stash]
class_name = mnist.stash.DataLoaderStash
delegate = eval({'import': ['zensols.persist']}): zensols.persist.DictionaryStash()
path = ${default:dataset_dir}

[dataset_stash]
class_name = zensols.dataset.DatasetSplitStash
delegate = instance: dataloader_stash
split_container = instance: dataloader_stash

[batch_dataset_dir_stash]
class_name = zensols.persist.DirectoryStash
path = path: ${default:temporary_batch_dir}/data

[batch_dataset_stash]
class_name = zensols.deeplearn.batch.BatchStash
delegate = instance: batch_dataset_dir_stash
split_stash_container = instance: dataset_stash
data_point_id_sets_path = path: ${default:temporary_batch_dir}/batch-point-keys.dat
vectorizer_manager_set = instance: vectorizer_set
data_point_type = eval({'import': ['mnist.model']}): mnist.model.MnistDataPoint
batch_type = eval({'import': ['mnist.model']}): mnist.model.MnistBatch
decoded_attributes = None
model_torch_config = instance: gpu_torch_config
batch_size = 20
chunk_size = 0
workers = 0
batch_limit = eval: sys.maxsize
