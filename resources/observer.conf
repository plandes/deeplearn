## Observer configuration, which adds an event logger and dumper by default

# a model observer that logs at INFO level
[log_model_observer]
class_name = zensols.deeplearn.LogModelObserver
level = eval({'import': ['logging as lg']}): lg.INFO

# model observer that writes a CSV of all events it captures, and writes them
# when it receives an `execute_end`
[dump_model_observer]
class_name = zensols.deeplearn.DumperObserver
output_file = path: ${deeplearn_default:results_dir}/events.csv
trigger_events = set: test_end
trigger_callers = set: zensols.deeplearn.model.ModelFacade

# the manager that notifies the observers and called by those that fire events
[model_observer_manager]
class_name = zensols.deeplearn.ModelObserverManager
observers = instance: list: log_model_observer, dump_model_observer

# add our configured observer manager to the settings, which in turn gets
# picked up by those framework components that want to fire events
[model_settings]
observer_manager = instance: model_observer_manager
